% =========================================================================
% REHAZENTER ACTIMETRY TOOLBOX
% =========================================================================
% File name:    plot_results
% -------------------------------------------------------------------------
% Subject:      Plot actimetry measurements
% -------------------------------------------------------------------------
% Author: F. Moissenet, G. Areno
% Date of creation: 31/01/2019
% Version: 1
% =========================================================================

function plot_result(interval)

% -------------------------------------------------------------------------
% Sélection les fichiers
% -------------------------------------------------------------------------
% Ouvrir le fichier 6MWT de référence
[file,folder] = uigetfile('*_6MWT*.mat', 'Sélectionnez le fichier 6MWT requis');
load([folder,file]);
% Ouvrir le ou les fichiers de mesures
[file,folder] = uigetfile('*.mat', 'Sélectionnez les fichiers de mesure requis','MultiSelect','on');
if iscell(file) % Test : si 1 fichier, file est un "char" sinon un "cell"
    n = size(file,2);
else
    n = 1;
end

% -------------------------------------------------------------------------
% Préparer la figure
% -------------------------------------------------------------------------
figure();

% -------------------------------------------------------------------------
% Traiter chaque fichiers sélectionnés
% -------------------------------------------------------------------------
for ifile = 1:n
    
    % Charger les données
    clear data_Mes;
    if n == 1 % Test : si 1 fichier, file est un "char" sinon un "cell"
        load([folder,file]);
    else
        load([folder,file{ifile}]);
    end
    
    % Préparer l'affichage du graphique
    subplot(n,1,ifile); hold on; box on; grid on;
    title(['Test du ',data_Mes.Date]);
    
    % Préparer l'affichage HH:MM
    minVal = [0:1:round(size(data_Mes.AccNORM,1)/(60/str2num(data_Mes.Epoch)))];
    hour = str2num(data_Mes.Hour);
    minute = str2num(data_Mes.Min);
    for i = 1:length(minVal)
        clear temp;
        for j = 1:fix(max(minVal/60)) 
            if minute+minVal(i) >= 60*j
                hour = hour+j; % Gestion du passage d'heure
                minute = minute+minVal(i)-60*j;
            else
                minute = minute+minVal(i);
            end
        end
        if minute < 10
            hourVal{i} = [num2str(hour),':0',num2str(minute)];
        else
            hourVal{i} = [num2str(hour),':',num2str(minute)];
        end
    end
    
    % Adapter les données en fonction de l'interval de temps souhaité
    j = 1;
    for i = 1:interval:length(minVal)
        xVal(j) = minVal(i)*size(data_Mes.AccNORM,1)/length(minVal);
        xLab{j} = hourVal{i};
        j = j+1;
    end
    
    % Tracer les mesures
    xticks(xVal);
    xticklabels(xLab);
    xtickangle(90);
    xlabel(['Temps (interval de ',num2str(interval),' min)']);
    ylabel('Intensité de l''activité (%6MWT)');
    AccNORM_norm = data_Mes.AccNORM/round(data_6MWT.ref_6MWT)*100; % %6MWT
    plot(AccNORM_norm);
    
end